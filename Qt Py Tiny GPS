#include <U8g2lib.h>
#include <TinyGPS++.h>

static const uint32_t GPSBaud = 9600;

TinyGPSPlus gps;

U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, /* reset=*/ U8X8_PIN_NONE);

// setup the terminal (U8G2LOG) and connect to u8g2 for automatic refresh of the display
// The size (width * height) depends on the selected font and the display
// assume 4x6 font
#define U8LOG_WIDTH 32
#define U8LOG_HEIGHT 4
uint8_t u8log_buffer[U8LOG_WIDTH*U8LOG_HEIGHT];
U8G2LOG u8g2log;

int gpschar; 
void setup()
{
  //Serial.begin(GPSBaud);
  Serial1.begin(GPSBaud);
 
  u8g2.begin();  
  
  u8g2log.begin(U8LOG_WIDTH, U8LOG_HEIGHT, u8log_buffer);
  u8g2log.setLineHeightOffset(1); // set extra space between lines in pixel, this can be negative
  u8g2log.setRedrawMode(0);   // 0: Update screen with newline, 1: Update screen for every char  
  
}

unsigned long t = 0;

void loop()
{

  u8g2.firstPage();
  do {
    u8g2.setFont(u8g2_font_u8glib_4_tr);    // font for the title
    u8g2.drawFrame(0, 0, 128,64);
    u8g2.drawLine(0, 9, 128,9);
    u8g2.drawLine(0, 28, 128,28);
    u8g2.drawStr(2, 7, "TINY GPS ");
    
    u8g2.drawLine(0, 54, 128,54);
    u8g2.drawStr(2, 61, "OKUBO HEAVY INDUSTRIES");
    
    
     while (Serial1.available()>0)  /* Encode data read from GPS while data is available on serial port */
     
     {  gpschar = Serial1.read();
        //Serial.write(gpschar);  // for the debug
        u8g2log.write(gpschar);
        gps.encode(gpschar);
      }
     
     
     unsigned long start;
     double lat_val, lng_val, alt_m_val;
     uint8_t hr_val, min_val, sec_val;
     bool loc_valid, alt_valid, time_valid, sats_valid;
     lat_val = gps.location.lat();  /* Get latitude data */
     loc_valid = gps.location.isValid(); /* Check if valid location data is available */
     lng_val = gps.location.lng(); /* Get longtitude data */
     alt_m_val = gps.altitude.meters();  /* Get altitude data in meters */
     alt_valid = gps.altitude.isValid(); /* Check if valid altitude data is available */
     hr_val = gps.time.hour(); /* Get hour */
     min_val = gps.time.minute();  /* Get minutes */
     sec_val = gps.time.second();  /* Get seconds */
     time_valid = gps.time.isValid();  /* Check if valid time data is available */
     sats_valid = gps.satellites.isValid();
     int sats_val = gps.satellites.value();

      int hr_val_jp;
     if (hr_val < 15) { hr_val_jp = hr_val + 9;  // convert utc to jpn
     }
     else {hr_val_jp = hr_val -15;
     }
     
     if (!loc_valid)
      {          
        u8g2.drawStr(3, 16, "LAT : ********");
        u8g2.drawStr(60, 16, "LON : ********");
        
       }
       else
       {
          u8g2.drawStr(3, 16, "LAT :");
          u8g2.setCursor(22, 16);
          u8g2.println(lat_val, 6);
          //u8g2.println(lat_val -0.4242, 6); //hide location for pictures
          
          u8g2.drawStr(60, 16, "LON :");
          u8g2.setCursor(79, 16);
          u8g2.println(lng_val, 6);
          //u8g2.println(lng_val +0.1337, 6); //hide location for pictures
          
        }
        if (!alt_valid)
        {
         
          u8g2.drawStr(3, 24, "ALT : ********");
        }
        else
        {
         
          u8g2.drawStr(3, 24, "ALT :");
          u8g2.setCursor(22, 24);
          u8g2.println(alt_m_val, 2);   
        }
        
        if (!sats_valid)
        {
          
          u8g2.drawStr(60, 24, "SAT : **");
        }
        else
        {
          
          u8g2.drawStr(60, 24, "SAT :");
          u8g2.setCursor(79, 24);
          u8g2.println(sats_val, 1);   
        }
        
        if (!time_valid)
        {
          u8g2.drawStr(65, 7, "Time : ********");
          
        }
        else
        {
          char time_string[32];
          sprintf(time_string, "Time : %02d:%02d:%02d \n", hr_val_jp, min_val, sec_val);
          u8g2.setCursor(65, 7);
          u8g2.print(time_string);    
        }
  
      
  
    //u8g2.setFont(u8g2_font_u8glib_4_tr);     // set the font for the terminal window
   
    u8g2.drawLog(3, 35, u8g2log);     // draw the log content on the display
    
  } while ( u8g2.nextPage() );

}
